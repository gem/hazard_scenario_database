#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (c) 2018, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/agpl.html>.
#
import re
import numpy as np
import json

from datetime import date
from mhs import Footprint, FootprintSet, Event, EventSet

EVENTS = [
    {
        'id':           'andmw86',
        'frequency':    1/500.
        'description':  'Tsunami generated by earthquake Mw8.6 ' +
                        'scenario originating from the ' +
                        'Sumatra-Andaman subduction zone'
    },
    {
        'id':           'andmw93',
        'frequency':    1/2500.
        'description':  'Tsunami generated by earthquake Mw9.3 ' +
                        'scenario originating from the ' +
                        'Sumatra-Andaman subduction zone'
    },
    {
        'id':           'summw88',
        'frequency':    1/500.
        'description':  'Tsunami generated by earthquake Mw8.8 ' +
                        'scenario originating from the Sumatran ' +
                        'subduction zone'
    },
    {
        'id':           'summw95',
        'frequency':    1/2500.
        'description':  'Tsunami generated by earthquake Mw9.5 ' +
                        'scenario originating from the Sumatran ' +
                        'subduction zone'
    },
    {
        'id':           'makmw88',
        'frequency':    1/500.
        'description':  'Tsunami generated by earthquake Mw8.8 ' +
                        'scenario originating from the Makran ' +
                        'subduction zone'
    },
    {
        'id':           'makmw93',
        'frequency':    1/2500.
        'description':  'Tsunami generated by earthquake Mw9.3 ' +
                        'scenario originating from the Makran ' +
                        'subduction zone'
    }
]

sigma_msg = \
    'Lognormal distribution with fixed lognormal uncertainty sigma=0.95.'


class Tsunami():
    def __init__(self,  data=None):
        self.data = data

    @classmethod
    def from_file(cls, out_fname):
        """
        :param out_fname:
        """
        data = []
        for i, line in enumerate(open(out_fname)):
            aa = re.split(' ', line)
            data.append([float(aa[2]), float(aa[0]), float(aa[1])])

        print('{:s} contains {:d} points'.format(out_fname, len(data)))
        return cls(np.array(data))


def _foo:
        # TODO load meta-data from a file to replace hard
        # coded values
        for e in EVENTS:
            fsid = '{}.fps1'.format(e['id'])
            data_file = 'TsunamiEventSet1.Andmw86.fps1'
            fp = Footprint(
                            fid='{}.fp'.format(e['id']),
                            fsid=fsid
                            data=[])
            fps = FootprintSet(
                            event_id=e['id']
                            fsid=fsid,
                            imt='height',
                            process_type='TSI',
                            footprints=footprints
                            data_uncertainty=sigma_msg)
            footprint_sets.append(fps)
            footprints = [fp]

            event = Event(
                            eid=e['id']
                            event_set_id='es1',
                            calculation_method='SIM',
                            frequency=e['frequency'],
                            occurrence_prob=None,
                            occurrence_time_start=None,
                            occurrence_time_end=None,
                            occurrence_time_span=None,
                            trigger_hazard_type='EQK',
                            trigger_process_type=None,
                            trigger_event_id=None,
                            description=e['description']
                            footprint_sets=footprint_sets)
            events.append(event)
            footprint_sets = []

        # TODO load meta-data from a file to replace hard coded values
        descr = 'Tsunami runup due to potential earthquakes from ' + \
                'Andaman, Makran and Sumatra'
        eventset = EventSet(esid='es1',
                            geographic_area_bb=[36, 43, -13, -3],
                            geographic_area_name='East coast of Africa',
                            creation_date=date(2018, 3, 9).isoformat(),
                            hazard_type='TSU',
                            time_start=None,
                            time_end=None,
                            time_duration=None,
                            description=descr,
                            bibliography=None,
                            events=events)
        return eventset


def read_event_set(site_file, gmf_file):
    """
    Read an EventSet from site and GMF CSV files
    """
    sites = SitesCsv.from_csv_file(site_file)
    return GmfCsv.from_csv_file(gmf_file, sites)


def main():
    site_file = './../../scenarios/Earthquakes/20180117/sitemesh-_17001.csv'
    gmf_file = './../../scenarios/Earthquakes/20180117/gmf-data_17001.csv'
    es = read_event_set(site_file, gmf_file)

    with open('sample.json', 'w') as fout:
        json.dump(es, fout, default=dumper, indent=2)


if __name__ == "__main__":
    main()
