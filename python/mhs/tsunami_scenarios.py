#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (c) 2018, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/agpl.html>.
#
import re
import numpy as np
import json
import os

from datetime import date
from mhs import Footprint, FootprintSet, Event, EventSet
from import_scenarios import import_event_set

# TODO load meta-data from a file to replace hard
# coded values
EVENT_INFO = [
    {
        'id':           'andmw86',
        'frequency':    1/500.,
        'description':  'Tsunami generated by earthquake Mw8.6 ' +
                        'scenario originating from the ' +
                        'Sumatra-Andaman subduction zone',
        'file':         'runup_shorel_res-AndamanMw86_LSW'
    },
    {
        'id':           'andmw93',
        'frequency':    1/2500.,
        'description':  'Tsunami generated by earthquake Mw9.3 ' +
                        'scenario originating from the ' +
                        'Sumatra-Andaman subduction zone',
        'file':         'runup_shorel_res-AndamanMw93_LSW'
    },
    {
        'id':           'summw88',
        'frequency':    1/500.,
        'description':  'Tsunami generated by earthquake Mw8.8 ' +
                        'scenario originating from the Sumatran ' +
                        'subduction zone',
        'file':         'runup_shorel_res-Sumatra_Mw88_LSW'
    },
    {
        'id':           'summw95',
        'frequency':    1/2500.,
        'description':  'Tsunami generated by earthquake Mw9.5 ' +
                        'scenario originating from the Sumatran ' +
                        'subduction zone',
        'file':         'runup_shorel_res-Sumatra_Mw95_LSW'
    },
    {
        'id':           'makmw88',
        'frequency':    1/500.,
        'description':  'Tsunami generated by earthquake Mw8.8 ' +
                        'scenario originating from the Makran ' +
                        'subduction zone',
        'file':         'runup_shorel_res-Makran_Mw87_LSW',
    },
    {
        'id':           'makmw93',
        'frequency':    1/2500.,
        'description':  'Tsunami generated by earthquake Mw9.3 ' +
                        'scenario originating from the Makran ' +
                        'subduction zone',
        'file':         'runup_shorel_res-Makran_Mw93_LSW'
    }
]

SIGMA_MSG = \
    'Lognormal distribution with fixed lognormal uncertainty sigma=0.95.'


class Tsunami():

    def __init__(self,  data=None):
        self.data = data

    @classmethod
    def from_file(cls, out_fname):
        """
        :param out_fname:
        """
        data = []
        for i, line in enumerate(open(out_fname)):
            aa = re.split(' ', line)
            data.append([float(aa[2]), float(aa[0]), float(aa[1])])

        print('{:s} contains {:d} points'.format(out_fname, len(data)))
        return cls(np.array(data))


def read_tsunami_event_set(basedir):
    """
    Read Tsunami scenario data from files in the given directory
    """
    events = []
    for e in EVENT_INFO:
        fsid = '{}.fps1'.format(e['id'])
        data_file = os.path.join(basedir, e['file'])
        tsunami = Tsunami.from_file(data_file)

        fp = Footprint(
                        fid='{}.fp'.format(e['id']),
                        fsid=fsid,
                        data=tsunami.data)
        fps = FootprintSet(
                        event_id=e['id'],
                        fsid=fsid,
                        imt='height',
                        process_type='TSI',
                        footprints=[fp],
                        data_uncertainty=SIGMA_MSG)

        event = Event(
                        eid=e['id'],
                        event_set_id='es1',
                        calculation_method='SIM',
                        frequency=e['frequency'],
                        occurrence_prob=None,
                        occurrence_time_start=None,
                        occurrence_time_end=None,
                        occurrence_time_span=None,
                        trigger_hazard_type='EQK',
                        trigger_process_type=None,
                        trigger_event_id=None,
                        description=e['description'],
                        footprint_sets=[fps])
        events.append(event)

    # TODO load meta-data from a file to replace hard coded values
    descr = 'Tsunami runup due to potential earthquakes from ' + \
            'Andaman, Makran and Sumatra'
    eventset = EventSet(esid='es1',
                        geographic_area_bb=[36, 43, -13, -3],
                        geographic_area_name='East coast of Africa',
                        creation_date=date(2018, 3, 9).isoformat(),
                        hazard_type='TSU',
                        time_start=None,
                        time_end=None,
                        time_duration=None,
                        description=descr,
                        bibliography=None,
                        events=events)
    return eventset


def dumper(obj):
    try:
        return obj.as_dict()
    except:
        return obj.__dict__


def main():
    tsunami_dir = '../../scenarios/Tsunami/'
    es = read_tsunami_event_set(tsunami_dir)

    with open('tsunami.json', 'w') as fout:
        json.dump(es, fout, default=dumper, indent=2)
    import_event_set(es)


if __name__ == "__main__":
    main()
